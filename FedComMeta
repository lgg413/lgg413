import numpy as np
import math
import random
from imgaug import augmenters as iaa
from ot import emd2


class FedComMeta:
    def __init__(self, dp):
        self.dp = dp
        self.td = 0.1
        self.ta = -0.1
        self.Ass = []
        self.gamma = 3

    def assign_clients(self, balance=True):
        if not balance:
            self.Ass = [{i} for i in range(self.dp.size_device)]
            return
        client_pool = set([i for i in range(self.dp.size_device)])
        while client_pool:
            new_Ass = set()
            Ass_label_histograms = []
            while client_pool and len(new_Ass) < self.gamma:
                select_client, emd_score = None, float('inf')
                for client in client_pool:
                    client_histogram = np.histogram(self.dp.local_train_label[client], bins=self.label_bins)[0]
                    combined_histogram = np.hstack([Ass_label_histograms, client_histogram])
                    emd_score_new = emd2(self.dp.global_train_histogram, combined_histogram, self.cost_matrix)
                    if emd_score_new < emd_score:
                        select_client = client
                        emd_score = emd_score_new
                new_Ass.add(select_client)
                Ass_label_histograms.append(client_histogram)
                client_pool.remove(select_client)
            self.Ass.append(new_Ass)



        for k in range(self.dp.size_device):
            print('size: {}'.format(k))
            new_feature_array = np.empty([0, self.dp.size_feature])
            new_label = []
            for i in range(len(self.dp.local_train_feature[k])):
                if i % 1000 == 0:
                    print('the {}th feature'.format(i))
                x, y = self.dp.local_train_feature[k][i], self.dp.local_train_label[k][i]
                new_x, new_y = x, y
                if y in y_down:
                    new_x, new_y = self.down_sample(x, y, r_ad[y])
                elif y in y_aug:
                    aug_x, aug_y = self.augment(x, y, r_ad[y]-1)
                    if aug_x is not None:
                        new_feature_array = np.vstack([new_feature_array, aug_x])
                        new_label.append(aug_y)
                if new_x is not None:
                    new_feature_array = np.vstack([new_feature_array, new_x])
                    new_label.append(new_y)
            self.dp.local_train_feature[k] = new_feature_array
            self.dp.local_train_label[k] = np.array(new_label)
        self.dp.refresh_global_data()

    @staticmethod
    def down_sample(x, y, r_ad):
        if random.random() < r_ad:
            return x, y
        else:
            return None, None

    def augment(self, x, y, r_ad):
        if random.random() > r_ad:
            return None, None
        else:
            image = None
            if self.dp.data_source == 'cifar':
                image = x.reshape(32, 32, 3)
            elif self.dp.data_source == 'mnist':
                image = x.reshape(28, 28)

            rand_select = random.random()
            image_aug = None
            image = image.astype(np.uint8)
            # augment the new image
            if rand_select < 0.25:
                image_aug = self.rotate(image)
            elif rand_select < 0.5:
                image_aug = self.shear(image)
            elif rand_select < 0.75:
                image_aug = self.scale(image)
            elif rand_select < 1:
                image_aug = self.shift(image)
            return image_aug.reshape(-1), y

    @staticmethod
    def rotate(image):
        rotate = iaa.Affine(rotate=(-25, 25))
        image_aug = rotate(image=image)
        return image_aug

    @staticmethod
    def shear(image):
        # shear image randomly between -25 and 25 degree
        aug_x = iaa.ShearX((-25, 25))
        aug_y = iaa.ShearY((-25, 25))
        image_aug = aug_x(image=image)
        image_aug = aug_y(image=image_aug)
        return image_aug

    @staticmethod
    def scale(image):
        # scale image randomly between 0.5 and 1.5
        aug1 = iaa.ScaleX((0.5, 1.5))
        aug2 = iaa.ScaleY((0.5, 1.5))
        image_aug = aug1(image=image)
        image_aug = aug2(image=image_aug)
        return image_aug

    @staticmethod
    def shift(image):
        # shift image randomly 10 percent
        aug1 = iaa.TranslateX(percent=(-0.1, 0.1))
        aug2 = iaa.TranslateY(percent=(-0.1, 0.1))
        image_aug = aug1(image=image)
        image_aug = aug2(image=image_aug)
        return image_aug


if __name__ == '__main__':
    print('self balance functions')
